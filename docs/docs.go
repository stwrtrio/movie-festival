// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/admin/most-viewed": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "To get most viewd movie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get Most Viewed Movie",
                "responses": {
                    "200": {
                        "description": "Success get most viewd movie",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    }
                }
            }
        },
        "/api/admin/most-viewed-genres": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "To get most viewed movie genre",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get Most Viewed Movie Genre",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the most view movie",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Number of items per page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order (ASC or DESC), default is DESC",
                        "name": "sort_order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success get most viewd movie",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    }
                }
            }
        },
        "/api/admin/movie": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "To create movie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Create Movie",
                "parameters": [
                    {
                        "description": "Movie Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateMovieRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success create movie",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    }
                }
            }
        },
        "/api/admin/movie/:id": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "To update movie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Update Movie",
                "parameters": [
                    {
                        "description": "Movie Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CreateMovieRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success update movie",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    }
                }
            }
        },
        "/api/admin/movies/most-voted": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "To get most voted movie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Most Voted Movie",
                "responses": {
                    "200": {
                        "description": "Success vote movie",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    }
                }
            }
        },
        "/api/movies": {
            "get": {
                "description": "To get all movie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get All Movie",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit number for pagination",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset of items per page",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Offset of items per page",
                        "name": "use-cache",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success get most viewd movie",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    }
                }
            }
        },
        "/api/movies/search": {
            "get": {
                "description": "To search all movie by keyword",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Search Movie",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Keyword to search movie",
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit number for pagination",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset of items per page",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success search movie",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    }
                }
            }
        },
        "/api/movies/{id}/view": {
            "post": {
                "description": "To track view movie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Track View Movie",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of the movie",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success track movie",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    }
                }
            }
        },
        "/api/user/login": {
            "post": {
                "description": "Authenticate a user and return a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "Login Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Access granted, includes JWT token",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    }
                }
            }
        },
        "/api/user/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Logout an authenticated user by invalidating token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "User Logout",
                "responses": {
                    "200": {
                        "description": "Success create user",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    }
                }
            }
        },
        "/api/user/movies/{id}/unvote": {
            "post": {
                "description": "To unvote the movie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Unvote Movie",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of the movie",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success unvote movie",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    }
                }
            }
        },
        "/api/user/movies/{id}/vote": {
            "post": {
                "description": "To vote the movie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Vote Movie",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of the movie",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success vote movie",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    }
                }
            }
        },
        "/api/user/register": {
            "post": {
                "description": "Create User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "User Register",
                "parameters": [
                    {
                        "description": "Register Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success create user",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    }
                }
            }
        },
        "/api/user/votes": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "To get movie voted by user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get User Vote",
                "responses": {
                    "200": {
                        "description": "Success get movie voted by user",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "$ref": "#/definitions/utils.JsonResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CreateMovieRequest": {
            "type": "object",
            "required": [
                "artists",
                "description",
                "duration",
                "genres",
                "title",
                "watch_url"
            ],
            "properties": {
                "artists": {
                    "description": "List of artist names",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer",
                    "minimum": 1
                },
                "genres": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string",
                    "maxLength": 150
                },
                "watch_url": {
                    "type": "string"
                }
            }
        },
        "models.LoginRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.RegisterRequest": {
            "type": "object",
            "required": [
                "password",
                "username"
            ],
            "properties": {
                "password": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 6
                },
                "username": {
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3
                }
            }
        },
        "utils.JsonResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {},
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
